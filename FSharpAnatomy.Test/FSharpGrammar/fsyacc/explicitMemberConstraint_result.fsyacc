%{%}
explicitMemberConstraint :
    | static member identOrOp COLON topTypeWithTypeConstraints classMemberSpfnGetSet optLiteralValueSpfn {}
identOrOp :
    | IDENT {}
    | opName {}
opName :
    | LPAREN operatorName RPAREN {}
    | LPAREN_STAR_RPAREN {}
    | LPAREN activePatternCaseNames BAR RPAREN {}
    | LPAREN activePatternCaseNames BAR UNDERSCORE BAR RPAREN {}
operatorName :
    | PREFIX_OP {}
    | INFIX_STAR_STAR_OP {}
    | INFIX_COMPARE_OP {}
    | INFIX_AT_HAT_OP {}
    | INFIX_BAR_OP {}
    | INFIX_AMP_OP {}
    | PLUS_MINUS_OP {}
    | INFIX_STAR_DIV_MOD_OP {}
    | DOLLAR {}
    | ADJACENT_PREFIX_OP {}
    | MINUS {}
    | STAR {}
    | EQUALS {}
    | OR {}
    | LESS {}
    | GREATER {}
    | QMARK {}
    | AMP {}
    | AMP_AMP {}
    | BAR_BAR {}
    | COLON_EQUALS {}
    | FUNKY_OPERATOR_NAME {}
    | PERCENT_OP {}
    | DOT_DOT {}
    | DOT_DOT DOT_DOT {}
    | LQUOTE RQUOTE {}
activePatternCaseNames :
    | BAR IDENT {}
    | activePatternCaseNames BAR IDENT {}
classMemberSpfnGetSet :
    | (*empty*) {}
    | WITH classMemberSpfnGetSetElements {}
    | OWITH classMemberSpfnGetSetElements OEND {}
classMemberSpfnGetSetElements :
    | identOrOp {}
    | identOrOp COMMA identOrOp {}
optLiteralValueSpfn :
    | (*empty*) {}
    | EQUALS declExpr {}
    | EQUALS OBLOCKBEGIN declExpr OBLOCKEND opt_ODECLEND {}
declExpr :
    | defnBindings IN typedSequentialExpr {}
    | hardwhiteLetBindings typedSequentialExprBlock {}
    | hardwhiteLetBindings OBLOCKSEP typedSequentialExprBlock {}
    | hardwhiteDoBinding {}
    | anonMatchingExpr {}
    | anonLambdaExpr {}
    | MATCH typedSequentialExpr withClauses {}
    | MATCH_BANG typedSequentialExpr withClauses {}
    | TRY typedSequentialExprBlockR withClauses {}
    | TRY typedSequentialExprBlockR FINALLY typedSequentialExprBlock {}
    | IF declExpr ifExprCases {}
    | LAZY declExpr {}
    | ASSERT declExpr {}
    | ASSERT {}
    | OLAZY declExprBlock {}
    | OASSERT declExprBlock {}
    | OASSERT {}
    | WHILE declExpr doToken typedSequentialExprBlock doneDeclEnd {}
    | FOR forLoopBinder doToken typedSequentialExprBlock doneDeclEnd {}
    | FOR forLoopBinder opt_OBLOCKSEP arrowThenExprR {}
    | FOR forLoopRange doToken typedSequentialExprBlock doneDeclEnd {}
    | YIELD declExpr {}
    | YIELD_BANG declExpr {}
    | BINDER headBindingPattern EQUALS typedSequentialExprBlock IN opt_OBLOCKSEP moreBinders typedSequentialExprBlock {}
    | OBINDER headBindingPattern EQUALS typedSequentialExprBlock ODECLEND opt_OBLOCKSEP moreBinders typedSequentialExprBlock {}
    | DO_BANG typedSequentialExpr IN opt_OBLOCKSEP typedSequentialExprBlock {}
    | ODO_BANG typedSequentialExprBlock ODECLEND {}
    | FIXED declExpr {}
    | RARROW typedSequentialExprBlockR {}
    | declExpr COLON_QMARK typ {}
    | declExpr COLON_GREATER typ {}
    | declExpr COLON_QMARK_GREATER typ {}
    | declExpr COLON_EQUALS declExpr {}
    | minusExpr LARROW declExprBlock {}
    | tupleExpr {}
    | declExpr JOIN_IN declExpr {}
    | declExpr BAR_BAR declExpr {}
    | declExpr INFIX_BAR_OP declExpr {}
    | declExpr OR declExpr {}
    | declExpr AMP declExpr {}
    | declExpr AMP_AMP declExpr {}
    | declExpr INFIX_AMP_OP declExpr {}
    | declExpr EQUALS declExpr {}
    | declExpr INFIX_COMPARE_OP declExpr {}
    | declExpr DOLLAR declExpr {}
    | declExpr LESS declExpr {}
    | declExpr GREATER declExpr {}
    | declExpr INFIX_AT_HAT_OP declExpr {}
    | declExpr PERCENT_OP declExpr {}
    | declExpr COLON_COLON declExpr {}
    | declExpr PLUS_MINUS_OP declExpr {}
    | declExpr MINUS declExpr {}
    | declExpr STAR declExpr {}
    | declExpr INFIX_STAR_DIV_MOD_OP declExpr {}
    | declExpr INFIX_STAR_STAR_OP declExpr {}
    | declExpr DOT_DOT declExpr {}
    | declExpr DOT_DOT {}
    | DOT_DOT declExpr {}
    | STAR {}
    | minusExpr {}
defnBindings :
    | LET opt_rec localBindings {}
    | cPrototype {}
opt_rec :
    | REC {}
    | (*empty*) {}
localBindings :
    | attr_localBinding moreLocalBindings {}
attr_localBinding :
    | opt_attributes localBinding {}
opt_attributes :
    | attributes {}
    | (*empty*) {}
localBinding :
    | opt_inline opt_mutable headBindingPattern opt_topReturnTypeWithTypeConstraints EQUALS typedExprWithStaticOptimizationsBlock {}
opt_inline :
    | INLINE {}
    | (*empty*) {}
opt_mutable :
    | MUTABLE {}
    | (*empty*) {}
headBindingPattern :
    | headBindingPattern AS constrPattern {}
    | headBindingPattern BAR headBindingPattern {}
    | headBindingPattern COLON_COLON headBindingPattern {}
    | tuplePatternElements {}
    | conjPatternElements {}
    | constrPattern {}
constrPattern :
    | atomicPatternLongIdent explicitValTyparDecls {}
    | atomicPatternLongIdent explicitValTyparDecls atomicPatsOrNamePatPairs {}
    | atomicPatternLongIdent explicitValTyparDecls HIGH_PRECEDENCE_PAREN_APP atomicPatsOrNamePatPairs {}
    | atomicPatternLongIdent explicitValTyparDecls HIGH_PRECEDENCE_BRACK_APP atomicPatsOrNamePatPairs {}
    | atomicPatternLongIdent atomicPatsOrNamePatPairs {}
    | atomicPatternLongIdent HIGH_PRECEDENCE_PAREN_APP atomicPatsOrNamePatPairs {}
    | atomicPatternLongIdent HIGH_PRECEDENCE_BRACK_APP atomicPatsOrNamePatPairs {}
    | COLON_QMARK atomTypeOrAnonRecdType {}
    | atomicPattern {}
atomicPatternLongIdent :
    | UNDERSCORE DOT pathOp {}
    | GLOBAL DOT pathOp {}
    | pathOp {}
    | access UNDERSCORE DOT pathOp {}
    | access pathOp {}
pathOp :
    | IDENT {}
    | opName {}
    | IDENT DOT pathOp {}
access :
    | PRIVATE {}
    | PUBLIC {}
    | INTERNAL {}
explicitValTyparDecls :
    | opt_HIGH_PRECEDENCE_TYAPP LESS explicitValTyparDeclsCore opt_typeConstraints GREATER {}
opt_HIGH_PRECEDENCE_TYAPP :
    | HIGH_PRECEDENCE_TYAPP {}
    | (*empty*) {}
explicitValTyparDeclsCore :
    | typarDeclList COMMA DOT_DOT {}
    | typarDeclList {}
    | (*empty*) {}
typarDeclList :
    | typarDeclList COMMA typarDecl {}
    | typarDecl {}
typarDecl :
    | opt_attributes typar {}
typar :
    | QUOTE IDENT {}
    | INFIX_AT_HAT_OP IDENT {}
opt_typeConstraints :
    | (*empty*) {}
    | WHEN typeConstraints {}
typeConstraints :
    | typeConstraints AND typeConstraint {}
    | typeConstraint {}
typeConstraint :
    | DEFAULT typar COLON typ {}
    | typar COLON_GREATER typ {}
    | typar COLON STRUCT {}
    | typar COLON IDENT STRUCT {}
    | typar COLON NULL {}
    | typar COLON LPAREN classMemberSpfn RPAREN {}
    | LPAREN typeAlts RPAREN COLON LPAREN classMemberSpfn RPAREN {}
    | typar COLON DELEGATE typeArgsNoHpaDeprecated {}
    | typar COLON IDENT typeArgsNoHpaDeprecated {}
    | typar COLON IDENT {}
    | appType {}
typ :
    | tupleType RARROW typ {}
    | tupleType {}
tupleType :
    | appType STAR tupleOrQuotTypeElements {}
    | INFIX_STAR_DIV_MOD_OP tupleOrQuotTypeElements {}
    | appType INFIX_STAR_DIV_MOD_OP tupleOrQuotTypeElements {}
    | appType {}
appType :
    | appType arrayTypeSuffix {}
    | appType HIGH_PRECEDENCE_BRACK_APP arrayTypeSuffix {}
    | appType appTypeConPower {}
    | LPAREN appTypePrefixArguments RPAREN appTypeConPower {}
    | powerType {}
    | typar COLON_GREATER typ {}
    | UNDERSCORE COLON_GREATER typ {}
arrayTypeSuffix :
    | LBRACK RBRACK {}
    | LBRACK COMMA RBRACK {}
    | LBRACK COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
appTypeConPower :
    | appTypeCon INFIX_AT_HAT_OP atomicRationalConstant {}
    | appTypeCon {}
appTypeCon :
    | path {}
    | typar {}
path :
    | GLOBAL {}
    | IDENT {}
    | path DOT IDENT {}
atomicRationalConstant :
    | atomicUnsignedRationalConstant {}
    | MINUS atomicUnsignedRationalConstant {}
atomicUnsignedRationalConstant :
    | INT32 {}
    | LPAREN rationalConstant RPAREN {}
rationalConstant :
    | INT32 INFIX_STAR_DIV_MOD_OP INT32 {}
    | MINUS INT32 INFIX_STAR_DIV_MOD_OP INT32 {}
    | INT32 {}
    | MINUS INT32 {}
appTypePrefixArguments :
    | typeArgActual COMMA typeArgActual typeArgListElements {}
typeArgActual :
    | typ {}
    | typ EQUALS typ {}
    | typ EQUALS {}
typeArgListElements :
    | typeArgListElements COMMA typeArgActual {}
    | typeArgListElements COMMA {}
    | (*empty*) {}
powerType :
    | atomTypeOrAnonRecdType {}
    | atomTypeOrAnonRecdType INFIX_AT_HAT_OP atomicRationalConstant {}
atomTypeOrAnonRecdType :
    | atomType {}
    | anonRecdType {}
atomType :
    | HASH atomType {}
    | appTypeConPower {}
    | UNDERSCORE {}
    | LPAREN typ RPAREN {}
    | STRUCT LPAREN appType STAR tupleOrQuotTypeElements RPAREN {}
    | rawConstant {}
    | NULL {}
    | CONST atomicExpr {}
    | FALSE {}
    | TRUE {}
    | appTypeCon typeArgsNoHpaDeprecated {}
    | atomType DOT path {}
    | atomType DOT path typeArgsNoHpaDeprecated {}
tupleOrQuotTypeElements :
    | appType STAR tupleOrQuotTypeElements {}
    | appType INFIX_STAR_DIV_MOD_OP tupleOrQuotTypeElements {}
    | appType {}
rawConstant :
    | INT8 {}
    | UINT8 {}
    | INT16 {}
    | UINT16 {}
    | INT32 {}
    | UINT32 {}
    | INT64 {}
    | UINT64 {}
    | NATIVEINT {}
    | UNATIVEINT {}
    | IEEE32 {}
    | IEEE64 {}
    | CHAR {}
    | DECIMAL {}
    | BIGNUM {}
    | STRING {}
    | KEYWORD_STRING {}
    | BYTEARRAY {}
atomicExpr :
    | atomicExpr HIGH_PRECEDENCE_BRACK_APP atomicExpr {}
    | atomicExpr HIGH_PRECEDENCE_PAREN_APP atomicExpr {}
    | atomicExpr HIGH_PRECEDENCE_TYAPP typeArgsActual {}
    | PREFIX_OP atomicExpr {}
    | QUOTE IDENT {}
    | atomicExpr DOT atomicExprQualification {}
    | BASE DOT atomicExprQualification {}
    | QMARK identOrOp {}
    | atomicExpr QMARK dynamicArg {}
    | GLOBAL {}
    | identExpr {}
    | LBRACK listExprElements RBRACK {}
    | STRUCT LPAREN tupleExpr RPAREN {}
    | atomicExprAfterType {}
typeArgsActual :
    | LESS typeArgActualOrDummyIfEmpty COMMA typeArgActualOrDummyIfEmpty typeArgListElements GREATER {}
    | LESS typeArgActual GREATER {}
    | LESS GREATER {}
typeArgActualOrDummyIfEmpty :
    | typeArgActual {}
    | (*empty*) {}
atomicExprQualification :
    | identOrOp {}
    | GLOBAL {}
    | (*empty*) {}
    | LPAREN COLON_COLON RPAREN DOT INT32 {}
    | LPAREN typedSequentialExpr RPAREN {}
    | LBRACK typedSequentialExpr RBRACK {}
typedSequentialExpr :
    | sequentialExpr COLON typeWithTypeConstraints {}
    | sequentialExpr {}
sequentialExpr :
    | declExpr seps sequentialExpr {}
    | declExpr seps {}
    | declExpr {}
    | declExpr THEN sequentialExpr {}
    | declExpr OTHEN OBLOCKBEGIN typedSequentialExpr OBLOCKEND {}
    | hardwhiteLetBindings {}
seps :
    | OBLOCKSEP {}
    | SEMICOLON {}
    | OBLOCKSEP SEMICOLON {}
    | SEMICOLON OBLOCKSEP {}
hardwhiteLetBindings :
    | OLET opt_rec localBindings ODECLEND {}
typeWithTypeConstraints :
    | typ {}
    | typ WHEN typeConstraints {}
dynamicArg :
    | IDENT {}
    | LPAREN typedSequentialExpr RPAREN {}
identExpr :
    | IDENT {}
    | opName {}
listExprElements :
    | sequentialExpr {}
    | (*empty*) {}
tupleExpr :
    | tupleExpr COMMA declExpr {}
    | declExpr COMMA declExpr {}
    | COMMA declExpr {}
atomicExprAfterType :
    | constant {}
    | parenExpr {}
    | braceExpr {}
    | braceBarExpr {}
    | interpolatedString {}
    | NULL {}
    | FALSE {}
    | TRUE {}
    | quoteExpr {}
    | arrayExpr {}
    | beginEndExpr {}
constant :
    | rawConstant {}
    | rawConstant HIGH_PRECEDENCE_TYAPP measureTypeArg {}
measureTypeArg :
    | LESS measureTypeExpr GREATER {}
    | LESS UNDERSCORE GREATER {}
measureTypeExpr :
    | measureTypeSeq {}
    | measureTypeExpr STAR measureTypeExpr {}
    | measureTypeExpr INFIX_STAR_DIV_MOD_OP measureTypeExpr {}
    | INFIX_STAR_DIV_MOD_OP measureTypeExpr {}
measureTypeSeq :
    | measureTypePower {}
    | measureTypePower measureTypeSeq {}
measureTypePower :
    | measureTypeAtom {}
    | measureTypeAtom INFIX_AT_HAT_OP atomicRationalConstant {}
    | INT32 {}
measureTypeAtom :
    | path {}
    | typar {}
    | LPAREN measureTypeExpr RPAREN {}
parenExpr :
    | LPAREN RPAREN {}
    | LPAREN parenExprBody RPAREN {}
parenExprBody :
    | typars COLON LPAREN classMemberSpfn RPAREN typedSequentialExpr {}
    | typedSequentialExpr {}
    | inlineAssemblyExpr {}
typars :
    | typar {}
    | LPAREN typarAlts RPAREN {}
typarAlts :
    | typarAlts OR appType {}
    | typar {}
classMemberSpfn :
    | opt_attributes opt_access memberSpecFlags opt_inline opt_access identOrOp opt_explicitValTyparDecls COLON topTypeWithTypeConstraints classMemberSpfnGetSet optLiteralValueSpfn {}
    | opt_attributes opt_access interfaceMember appType {}
    | opt_attributes opt_access INHERIT appType {}
    | opt_attributes opt_access VAL fieldDecl {}
    | opt_attributes opt_access STATIC VAL fieldDecl {}
    | opt_attributes opt_access STATIC TYPE tyconSpfn {}
    | opt_attributes opt_access NEW COLON topTypeWithTypeConstraints {}
opt_access :
    | (*empty*) {}
    | access {}
memberSpecFlags :
    | memberFlags {}
    | abstractMemberFlags {}
memberFlags :
    | STATIC MEMBER {}
    | MEMBER {}
    | OVERRIDE {}
    | DEFAULT {}
abstractMemberFlags :
    | ABSTRACT {}
    | ABSTRACT MEMBER {}
    | STATIC ABSTRACT {}
    | STATIC ABSTRACT MEMBER {}
opt_explicitValTyparDecls :
    | explicitValTyparDecls {}
    | (*empty*) {}
interfaceMember :
    | INTERFACE {}
    | OINTERFACE_MEMBER {}
fieldDecl :
    | opt_mutable opt_access IDENT COLON typ {}
tyconSpfn :
    | typeNameInfo EQUALS tyconSpfnRhsBlock {}
    | typeNameInfo opt_classSpfn {}
typeNameInfo :
    | opt_attributes tyconNameAndTyparDecls opt_typeConstraints {}
tyconNameAndTyparDecls :
    | opt_access path {}
    | opt_access prefixTyparDecls path {}
    | opt_access path postfixTyparDecls {}
prefixTyparDecls :
    | typar {}
    | LPAREN typarDeclList RPAREN {}
postfixTyparDecls :
    | opt_HIGH_PRECEDENCE_TYAPP LESS typarDeclList opt_typeConstraints GREATER {}
tyconSpfnRhsBlock :
    | OBLOCKBEGIN tyconSpfnRhs opt_OBLOCKSEP classSpfnMembers opt_classSpfn OBLOCKEND opt_classSpfn {}
    | tyconSpfnRhs opt_classSpfn {}
tyconSpfnRhs :
    | tyconDefnOrSpfnSimpleRepr {}
    | tyconClassSpfn {}
    | DELEGATE OF topType {}
tyconDefnOrSpfnSimpleRepr :
    | opt_attributes opt_access typ {}
    | opt_attributes opt_access unionTypeRepr {}
    | opt_attributes opt_access braceFieldDeclList {}
    | opt_attributes opt_access LPAREN HASH STRING HASH RPAREN {}
unionTypeRepr :
    | BAR attrUnionCaseDecls {}
    | firstUnionCaseDeclOfMany BAR attrUnionCaseDecls {}
    | firstUnionCaseDecl {}
attrUnionCaseDecls :
    | attrUnionCaseDecl BAR attrUnionCaseDecls {}
    | attrUnionCaseDecl {}
attrUnionCaseDecl :
    | opt_attributes opt_access unionCaseName {}
    | opt_attributes opt_access unionCaseName OF unionCaseRepr {}
    | opt_attributes opt_access unionCaseName COLON topType {}
    | opt_attributes opt_access unionCaseName EQUALS constant {}
unionCaseName :
    | identOrOp {}
    | LPAREN COLON_COLON RPAREN {}
    | LPAREN LBRACK RBRACK RPAREN {}
unionCaseRepr :
    | braceFieldDeclList {}
    | unionCaseReprElements {}
braceFieldDeclList :
    | LBRACE recdFieldDeclList RBRACE {}
recdFieldDeclList :
    | recdFieldDecl seps recdFieldDeclList {}
    | recdFieldDecl opt_seps {}
recdFieldDecl :
    | opt_attributes fieldDecl {}
opt_seps :
    | seps {}
    | (*empty*) {}
unionCaseReprElements :
    | unionCaseReprElement STAR unionCaseReprElements {}
    | unionCaseReprElement {}
unionCaseReprElement :
    | IDENT COLON appType {}
    | appType {}
topType :
    | topTupleType RARROW topType {}
    | topTupleType {}
topTupleType :
    | topAppType STAR topTupleTypeElements {}
    | topAppType {}
topAppType :
    | attributes appType COLON appType {}
    | attributes QMARK IDENT COLON appType {}
    | attributes appType {}
    | appType COLON appType {}
    | QMARK IDENT COLON appType {}
    | appType {}
topTupleTypeElements :
    | topAppType STAR topTupleTypeElements {}
    | topAppType {}
firstUnionCaseDeclOfMany :
    | IDENT opt_OBLOCKSEP {}
    | IDENT EQUALS constant opt_OBLOCKSEP {}
    | firstUnionCaseDecl opt_OBLOCKSEP {}
opt_OBLOCKSEP :
    | OBLOCKSEP {}
    | (*empty*) {}
firstUnionCaseDecl :
    | IDENT OF unionCaseRepr {}
    | IDENT EQUALS constant opt_OBLOCKSEP {}
tyconClassSpfn :
    | classSpfnBlockKindUnspecified {}
    | classOrInterfaceOrStruct classSpfnBlock END {}
classSpfnBlockKindUnspecified :
    | OBLOCKBEGIN classSpfnMembers OBLOCKEND {}
    | BEGIN classSpfnBlock END {}
classSpfnMembers :
    | classSpfnMembersAtLeastOne {}
    | (*empty*) {}
classSpfnMembersAtLeastOne :
    | classMemberSpfn opt_seps classSpfnMembers {}
classSpfnBlock :
    | OBLOCKBEGIN classSpfnMembers OBLOCKEND {}
    | classSpfnMembers {}
classOrInterfaceOrStruct :
    | CLASS {}
    | INTERFACE {}
    | STRUCT {}
opt_classSpfn :
    | WITH classSpfnBlock declEnd {}
    | (*empty*) {}
declEnd :
    | ODECLEND {}
    | OEND {}
    | END {}
inlineAssemblyExpr :
    | HASH STRING opt_inlineAssemblyTypeArg optCurriedArgExprs optInlineAssemblyReturnTypes HASH {}
opt_inlineAssemblyTypeArg :
    | (*empty*) {}
    | TYPE LPAREN typ RPAREN {}
optCurriedArgExprs :
    | optCurriedArgExprs argExpr {}
    | (*empty*) {}
argExpr :
    | ADJACENT_PREFIX_OP atomicExpr {}
    | atomicExpr {}
optInlineAssemblyReturnTypes :
    | (*empty*) {}
    | COLON typ {}
    | COLON LPAREN RPAREN {}
braceExpr :
    | LBRACE braceExprBody RBRACE {}
    | LBRACE RBRACE {}
braceExprBody :
    | recdExpr {}
    | objExpr {}
    | sequentialExpr {}
recdExpr :
    | INHERIT atomTypeNonAtomicDeprecated opt_HIGH_PRECEDENCE_APP opt_atomicExprAfterType recdExprBindings opt_seps_recd {}
    | recdExprCore {}
atomTypeNonAtomicDeprecated :
    | LPAREN appTypePrefixArguments RPAREN appTypeConPower {}
    | atomType {}
opt_HIGH_PRECEDENCE_APP :
    | HIGH_PRECEDENCE_BRACK_APP {}
    | HIGH_PRECEDENCE_PAREN_APP {}
    | (*empty*) {}
opt_atomicExprAfterType :
    | (*empty*) {}
    | atomicExprAfterType {}
recdExprBindings :
    | recdExprBindings seps_recd recdBinding {}
    | (*empty*) {}
seps_recd :
    | OBLOCKSEP {}
    | SEMICOLON {}
    | SEMICOLON OBLOCKSEP {}
    | OBLOCKSEP SEMICOLON {}
recdBinding :
    | pathOrUnderscore EQUALS declExprBlock {}
    | pathOrUnderscore EQUALS {}
    | pathOrUnderscore {}
pathOrUnderscore :
    | path {}
    | UNDERSCORE {}
declExprBlock :
    | OBLOCKBEGIN typedSequentialExpr OBLOCKEND {}
    | declExpr {}
opt_seps_recd :
    | seps_recd {}
    | (*empty*) {}
recdExprCore :
    | appExpr EQUALS declExprBlock recdExprBindings opt_seps_recd {}
    | UNDERSCORE {}
    | UNDERSCORE EQUALS {}
    | UNDERSCORE EQUALS declExprBlock recdExprBindings opt_seps_recd {}
    | appExpr WITH recdBinding recdExprBindings opt_seps_recd {}
    | appExpr OWITH opt_seps_recd OEND {}
    | appExpr OWITH recdBinding recdExprBindings opt_seps_recd OEND {}
appExpr :
    | appExpr argExpr {}
    | atomicExpr {}
objExpr :
    | objExprBaseCall objExprBindings opt_OBLOCKSEP opt_objExprInterfaces {}
    | objExprBaseCall opt_OBLOCKSEP objExprInterfaces {}
    | NEW atomTypeNonAtomicDeprecated {}
objExprBaseCall :
    | NEW atomTypeNonAtomicDeprecated opt_HIGH_PRECEDENCE_APP atomicExprAfterType baseSpec {}
    | NEW atomTypeNonAtomicDeprecated opt_HIGH_PRECEDENCE_APP atomicExprAfterType {}
    | NEW atomTypeNonAtomicDeprecated {}
baseSpec :
    | AS IDENT {}
    | AS BASE {}
objExprBindings :
    | WITH localBindings {}
    | OWITH localBindings OEND {}
    | WITH objectImplementationBlock opt_declEnd {}
objectImplementationBlock :
    | OBLOCKBEGIN objectImplementationMembers OBLOCKEND {}
    | objectImplementationMembers {}
objectImplementationMembers :
    | objectImplementationMember opt_seps objectImplementationMembers {}
    | objectImplementationMember opt_seps {}
objectImplementationMember :
    | opt_attributes staticMemberOrMemberOrOverride memberCore opt_ODECLEND {}
    | opt_attributes staticMemberOrMemberOrOverride autoPropsDefnDecl opt_ODECLEND {}
staticMemberOrMemberOrOverride :
    | STATIC MEMBER {}
    | MEMBER {}
    | OVERRIDE {}
memberCore :
    | opt_inline headBindingPattern opt_topReturnTypeWithTypeConstraints EQUALS typedSequentialExprBlock {}
    | opt_inline headBindingPattern opt_topReturnTypeWithTypeConstraints classDefnMemberGetSet {}
opt_topReturnTypeWithTypeConstraints :
    | (*empty*) {}
    | COLON topTypeWithTypeConstraints {}
typedSequentialExprBlock :
    | OBLOCKBEGIN typedSequentialExpr OBLOCKEND {}
    | typedSequentialExpr {}
classDefnMemberGetSet :
    | WITH classDefnMemberGetSetElements {}
    | OWITH classDefnMemberGetSetElements OEND {}
classDefnMemberGetSetElements :
    | classDefnMemberGetSetElement {}
    | classDefnMemberGetSetElement AND classDefnMemberGetSetElement {}
classDefnMemberGetSetElement :
    | opt_inline opt_attributes headBindingPattern opt_topReturnTypeWithTypeConstraints EQUALS typedSequentialExprBlock {}
opt_ODECLEND :
    | ODECLEND {}
    | (*empty*) {}
autoPropsDefnDecl :
    | VAL opt_mutable opt_access IDENT opt_typ EQUALS typedSequentialExprBlock classMemberSpfnGetSet {}
opt_typ :
    | (*empty*) {}
    | COLON typ {}
opt_declEnd :
    | ODECLEND {}
    | OEND {}
    | END {}
    | (*empty*) {}
opt_objExprInterfaces :
    | (*empty*) {}
    | objExprInterface opt_objExprInterfaces {}
objExprInterface :
    | interfaceMember appType opt_objExprBindings opt_declEnd opt_OBLOCKSEP {}
opt_objExprBindings :
    | objExprBindings {}
    | (*empty*) {}
objExprInterfaces :
    | objExprInterface opt_objExprInterfaces {}
braceBarExpr :
    | STRUCT braceBarExprCore {}
    | braceBarExprCore {}
braceBarExprCore :
    | LBRACE_BAR recdExprCore BAR_RBRACE {}
    | LBRACE_BAR BAR_RBRACE {}
interpolatedString :
    | INTERP_STRING_BEGIN_PART interpolatedStringFill interpolatedStringParts {}
    | INTERP_STRING_BEGIN_END {}
    | INTERP_STRING_BEGIN_PART interpolatedStringParts {}
interpolatedStringFill :
    | declExpr {}
    | declExpr COLON IDENT {}
interpolatedStringParts :
    | INTERP_STRING_END {}
    | INTERP_STRING_PART interpolatedStringFill interpolatedStringParts {}
    | INTERP_STRING_PART interpolatedStringParts {}
quoteExpr :
    | LQUOTE typedSequentialExpr RQUOTE {}
arrayExpr :
    | LBRACK_BAR arrayExprElements BAR_RBRACK {}
arrayExprElements :
    | sequentialExpr {}
    | (*empty*) {}
beginEndExpr :
    | BEGIN typedSequentialExpr END {}
    | BEGIN END {}
typeArgsNoHpaDeprecated :
    | typeArgsActual {}
    | HIGH_PRECEDENCE_TYAPP typeArgsActual {}
anonRecdType :
    | STRUCT braceBarFieldDeclListCore {}
    | braceBarFieldDeclListCore {}
braceBarFieldDeclListCore :
    | LBRACE_BAR recdFieldDeclList BAR_RBRACE {}
typeAlts :
    | typeAlts OR appType {}
    | appType {}
atomicPatsOrNamePatPairs :
    | LPAREN namePatPairs RPAREN {}
    | atomicPatterns {}
namePatPairs :
    | namePatPair opt_seps {}
    | namePatPair seps namePatPairs {}
namePatPair :
    | IDENT EQUALS parenPattern {}
parenPattern :
    | parenPattern AS constrPattern {}
    | parenPattern BAR parenPattern {}
    | tupleParenPatternElements {}
    | conjParenPatternElements {}
    | parenPattern COLON typeWithTypeConstraints {}
    | attributes parenPattern {}
    | parenPattern COLON_COLON parenPattern {}
    | constrPattern {}
tupleParenPatternElements :
    | tupleParenPatternElements COMMA parenPattern {}
    | parenPattern COMMA parenPattern {}
    | COMMA parenPattern {}
conjParenPatternElements :
    | conjParenPatternElements AMP parenPattern {}
    | parenPattern AMP parenPattern {}
atomicPatterns :
    | atomicPattern atomicPatterns {}
    | atomicPattern HIGH_PRECEDENCE_BRACK_APP atomicPatterns {}
    | atomicPattern HIGH_PRECEDENCE_PAREN_APP atomicPatterns {}
    | atomicPattern {}
atomicPattern :
    | quoteExpr {}
    | CHAR DOT_DOT CHAR {}
    | LBRACE recordPatternElementsAux RBRACE {}
    | LBRACK listPatternElements RBRACK {}
    | LBRACK_BAR listPatternElements BAR_RBRACK {}
    | UNDERSCORE {}
    | QMARK IDENT {}
    | atomicPatternLongIdent {}
    | constant {}
    | FALSE {}
    | TRUE {}
    | NULL {}
    | LPAREN parenPatternBody RPAREN {}
    | STRUCT LPAREN tupleParenPatternElements RPAREN {}
recordPatternElementsAux :
    | recordPatternElement opt_seps {}
    | recordPatternElement seps recordPatternElementsAux {}
recordPatternElement :
    | path EQUALS parenPattern {}
listPatternElements :
    | (*empty*) {}
    | parenPattern opt_seps {}
    | parenPattern seps listPatternElements {}
parenPatternBody :
    | parenPattern {}
    | (*empty*) {}
tuplePatternElements :
    | tuplePatternElements COMMA headBindingPattern {}
    | headBindingPattern COMMA headBindingPattern {}
    | COMMA headBindingPattern {}
conjPatternElements :
    | conjPatternElements AMP headBindingPattern {}
    | headBindingPattern AMP headBindingPattern {}
typedExprWithStaticOptimizationsBlock :
    | OBLOCKBEGIN typedExprWithStaticOptimizations OBLOCKEND {}
    | typedExprWithStaticOptimizations {}
typedExprWithStaticOptimizations :
    | typedSequentialExpr opt_staticOptimizations {}
opt_staticOptimizations :
    | opt_staticOptimizations staticOptimization {}
    | (*empty*) {}
staticOptimization :
    | WHEN staticOptimizationConditions EQUALS typedSequentialExprBlock {}
staticOptimizationConditions :
    | staticOptimizationConditions AND staticOptimizationCondition {}
    | staticOptimizationCondition {}
staticOptimizationCondition :
    | typar COLON typ {}
    | typar STRUCT {}
moreLocalBindings :
    | AND attr_localBinding moreLocalBindings {}
    | (*empty*) {}
cPrototype :
    | EXTERN cRetType opt_access IDENT opt_HIGH_PRECEDENCE_APP LPAREN externArgs RPAREN {}
cRetType :
    | opt_attributes cType {}
    | opt_attributes VOID {}
cType :
    | path {}
    | cType opt_HIGH_PRECEDENCE_APP LBRACK RBRACK {}
    | cType STAR {}
    | cType AMP {}
    | VOID STAR {}
externArgs :
    | externMoreArgs {}
    | externArg {}
    | (*empty*) {}
externMoreArgs :
    | externMoreArgs COMMA externArg {}
    | externArg COMMA externArg {}
externArg :
    | opt_attributes cType {}
    | opt_attributes cType IDENT {}
hardwhiteDoBinding :
    | ODO typedSequentialExprBlock ODECLEND {}
anonMatchingExpr :
    | FUNCTION withPatternClauses {}
    | OFUNCTION withPatternClauses OEND {}
withPatternClauses :
    | patternClauses {}
    | BAR patternClauses {}
patternClauses :
    | patternAndGuard patternResult {}
    | patternAndGuard patternResult BAR patternClauses {}
patternAndGuard :
    | parenPattern patternGuard {}
patternGuard :
    | WHEN declExpr {}
    | (*empty*) {}
patternResult :
    | RARROW typedSequentialExprBlockR {}
typedSequentialExprBlockR :
    | typedSequentialExpr ORIGHT_BLOCK_END {}
    | typedSequentialExpr {}
anonLambdaExpr :
    | FUN atomicPatterns RARROW typedSequentialExprBlock {}
    | OFUN atomicPatterns RARROW typedSequentialExprBlockR OEND {}
    | OFUN atomicPatterns RARROW ORIGHT_BLOCK_END OEND {}
withClauses :
    | WITH withPatternClauses {}
    | OWITH withPatternClauses OEND {}
ifExprCases :
    | ifExprThen ifExprElifs {}
ifExprThen :
    | THEN declExpr {}
    | OTHEN OBLOCKBEGIN typedSequentialExpr OBLOCKEND {}
ifExprElifs :
    | (*empty*) {}
    | ELSE declExpr {}
    | OELSE OBLOCKBEGIN typedSequentialExpr OBLOCKEND {}
    | ELIF declExpr ifExprCases {}
doToken :
    | DO {}
    | ODO {}
doneDeclEnd :
    | DONE {}
    | ODECLEND {}
forLoopBinder :
    | parenPattern IN declExpr {}
arrowThenExprR :
    | RARROW typedSequentialExprBlockR {}
forLoopRange :
    | parenPattern EQUALS declExpr forLoopDirection declExpr {}
forLoopDirection :
    | TO {}
    | DOWNTO {}
moreBinders :
    | AND_BANG headBindingPattern EQUALS typedSequentialExprBlock IN moreBinders {}
    | OAND_BANG headBindingPattern EQUALS typedSequentialExprBlock ODECLEND opt_OBLOCKSEP moreBinders {}
    | (*empty*) {}
minusExpr :
    | INFIX_AT_HAT_OP minusExpr {}
    | MINUS minusExpr {}
    | PLUS_MINUS_OP minusExpr {}
    | ADJACENT_PREFIX_OP minusExpr {}
    | PERCENT_OP minusExpr {}
    | AMP minusExpr {}
    | AMP_AMP minusExpr {}
    | NEW atomTypeNonAtomicDeprecated opt_HIGH_PRECEDENCE_APP atomicExprAfterType DOT atomicExprQualification {}
    | NEW atomTypeNonAtomicDeprecated opt_HIGH_PRECEDENCE_APP atomicExprAfterType {}
    | UPCAST minusExpr {}
    | DOWNCAST minusExpr {}
    | appExpr {}
%{%}
declExpr :
    | defnBindings IN typedSequentialExpr {}
    | hardwhiteLetBindings typedSequentialExprBlock {}
    | hardwhiteLetBindings OBLOCKSEP typedSequentialExprBlock {}
    | hardwhiteDoBinding {}
    | anonMatchingExpr {}
    | anonLambdaExpr {}
    | MATCH typedSequentialExpr withClauses {}
    | MATCH_BANG typedSequentialExpr withClauses {}
    | TRY typedSequentialExprBlockR withClauses {}
    | TRY typedSequentialExprBlockR FINALLY typedSequentialExprBlock {}
    | IF declExpr ifExprCases {}
    | LAZY declExpr {}
    | ASSERT declExpr {}
    | ASSERT {}
    | OLAZY declExprBlock {}
    | OASSERT declExprBlock {}
    | OASSERT {}
    | WHILE declExpr doToken typedSequentialExprBlock doneDeclEnd {}
    | FOR forLoopBinder doToken typedSequentialExprBlock doneDeclEnd {}
    | FOR forLoopBinder opt_OBLOCKSEP arrowThenExprR {}
    | FOR forLoopRange doToken typedSequentialExprBlock doneDeclEnd {}
    | YIELD declExpr {}
    | YIELD_BANG declExpr {}
    | BINDER headBindingPattern EQUALS typedSequentialExprBlock IN opt_OBLOCKSEP moreBinders typedSequentialExprBlock {}
    | OBINDER headBindingPattern EQUALS typedSequentialExprBlock ODECLEND opt_OBLOCKSEP moreBinders typedSequentialExprBlock {}
    | DO_BANG typedSequentialExpr IN opt_OBLOCKSEP typedSequentialExprBlock {}
    | ODO_BANG typedSequentialExprBlock ODECLEND {}
    | FIXED declExpr {}
    | RARROW typedSequentialExprBlockR {}
    | declExpr COLON_QMARK typ {}
    | declExpr COLON_GREATER typ {}
    | declExpr COLON_QMARK_GREATER typ {}
    | declExpr COLON_EQUALS declExpr {}
    | minusExpr LARROW declExprBlock {}
    | tupleExpr {}
    | declExpr JOIN_IN declExpr {}
    | declExpr BAR_BAR declExpr {}
    | declExpr INFIX_BAR_OP declExpr {}
    | declExpr OR declExpr {}
    | declExpr AMP declExpr {}
    | declExpr AMP_AMP declExpr {}
    | declExpr INFIX_AMP_OP declExpr {}
    | declExpr EQUALS declExpr {}
    | declExpr INFIX_COMPARE_OP declExpr {}
    | declExpr DOLLAR declExpr {}
    | declExpr LESS declExpr {}
    | declExpr GREATER declExpr {}
    | declExpr INFIX_AT_HAT_OP declExpr {}
    | declExpr PERCENT_OP declExpr {}
    | declExpr COLON_COLON declExpr {}
    | declExpr PLUS_MINUS_OP declExpr {}
    | declExpr MINUS declExpr {}
    | declExpr STAR declExpr {}
    | declExpr INFIX_STAR_DIV_MOD_OP declExpr {}
    | declExpr INFIX_STAR_STAR_OP declExpr {}
    | declExpr DOT_DOT declExpr {}
    | declExpr DOT_DOT {}
    | DOT_DOT declExpr {}
    | STAR {}
    | minusExpr {}
defnBindings :
    | LET opt_rec localBindings {}
    | cPrototype {}
opt_rec :
    | REC {}
    | (*empty*) {}
localBindings :
    | attr_localBinding moreLocalBindings {}
attr_localBinding :
    | opt_attributes localBinding {}
opt_attributes :
    | attributes {}
    | (*empty*) {}
localBinding :
    | opt_inline opt_mutable headBindingPattern opt_topReturnTypeWithTypeConstraints EQUALS typedExprWithStaticOptimizationsBlock {}
opt_inline :
    | INLINE {}
    | (*empty*) {}
opt_mutable :
    | MUTABLE {}
    | (*empty*) {}
headBindingPattern :
    | headBindingPattern AS constrPattern {}
    | headBindingPattern BAR headBindingPattern {}
    | headBindingPattern COLON_COLON headBindingPattern {}
    | tuplePatternElements {}
    | conjPatternElements {}
    | constrPattern {}
opt_topReturnTypeWithTypeConstraints :
    | (*empty*) {}
    | COLON topTypeWithTypeConstraints {}
topTypeWithTypeConstraints :
    | topType {}
    | topType WHEN typeConstraints {}
typedExprWithStaticOptimizationsBlock :
    | OBLOCKBEGIN typedExprWithStaticOptimizations OBLOCKEND {}
    | typedExprWithStaticOptimizations {}
typedExprWithStaticOptimizations :
    | typedSequentialExpr opt_staticOptimizations {}
typedSequentialExpr :
    | sequentialExpr COLON typeWithTypeConstraints {}
    | sequentialExpr {}
typeWithTypeConstraints :
    | typ {}
    | typ WHEN typeConstraints {}
opt_staticOptimizations :
    | opt_staticOptimizations staticOptimization {}
    | (*empty*) {}
staticOptimization :
    | WHEN staticOptimizationConditions EQUALS typedSequentialExprBlock {}
staticOptimizationConditions :
    | staticOptimizationConditions AND staticOptimizationCondition {}
    | staticOptimizationCondition {}
staticOptimizationCondition :
    | typar COLON typ {}
    | typar STRUCT {}
typedSequentialExprBlock :
    | OBLOCKBEGIN typedSequentialExpr OBLOCKEND {}
    | typedSequentialExpr {}
moreLocalBindings :
    | AND attr_localBinding moreLocalBindings {}
    | (*empty*) {}
hardwhiteLetBindings :
    | OLET opt_rec localBindings ODECLEND {}
hardwhiteDoBinding :
    | ODO typedSequentialExprBlock ODECLEND {}
anonMatchingExpr :
    | FUNCTION withPatternClauses {}
    | OFUNCTION withPatternClauses OEND {}
withPatternClauses :
    | patternClauses {}
    | BAR patternClauses {}
patternClauses :
    | patternAndGuard patternResult {}
    | patternAndGuard patternResult BAR patternClauses {}
patternAndGuard :
    | parenPattern patternGuard {}
patternGuard :
    | WHEN declExpr {}
    | (*empty*) {}
patternResult :
    | RARROW typedSequentialExprBlockR {}
typedSequentialExprBlockR :
    | typedSequentialExpr ORIGHT_BLOCK_END {}
    | typedSequentialExpr {}
anonLambdaExpr :
    | FUN atomicPatterns RARROW typedSequentialExprBlock {}
    | OFUN atomicPatterns RARROW typedSequentialExprBlockR OEND {}
    | OFUN atomicPatterns RARROW ORIGHT_BLOCK_END OEND {}
atomicPatterns :
    | atomicPattern atomicPatterns {}
    | atomicPattern HIGH_PRECEDENCE_BRACK_APP atomicPatterns {}
    | atomicPattern HIGH_PRECEDENCE_PAREN_APP atomicPatterns {}
    | atomicPattern {}
atomicPattern :
    | quoteExpr {}
    | CHAR DOT_DOT CHAR {}
    | LBRACE recordPatternElementsAux RBRACE {}
    | LBRACK listPatternElements RBRACK {}
    | LBRACK_BAR listPatternElements BAR_RBRACK {}
    | UNDERSCORE {}
    | QMARK IDENT {}
    | atomicPatternLongIdent {}
    | constant {}
    | FALSE {}
    | TRUE {}
    | NULL {}
    | LPAREN parenPatternBody RPAREN {}
    | STRUCT LPAREN tupleParenPatternElements RPAREN {}
quoteExpr :
    | LQUOTE typedSequentialExpr RQUOTE {}
recordPatternElementsAux :
    | recordPatternElement opt_seps {}
    | recordPatternElement seps recordPatternElementsAux {}
recordPatternElement :
    | path EQUALS parenPattern {}
path :
    | GLOBAL {}
    | IDENT {}
    | path DOT IDENT {}
opt_seps :
    | seps {}
    | (*empty*) {}
seps :
    | OBLOCKSEP {}
    | SEMICOLON {}
    | OBLOCKSEP SEMICOLON {}
    | SEMICOLON OBLOCKSEP {}
listPatternElements :
    | (*empty*) {}
    | parenPattern opt_seps {}
    | parenPattern seps listPatternElements {}
atomicPatternLongIdent :
    | UNDERSCORE DOT pathOp {}
    | GLOBAL DOT pathOp {}
    | pathOp {}
    | access UNDERSCORE DOT pathOp {}
    | access pathOp {}
pathOp :
    | IDENT {}
    | opName {}
    | IDENT DOT pathOp {}
opName :
    | LPAREN operatorName RPAREN {}
    | LPAREN_STAR_RPAREN {}
    | LPAREN activePatternCaseNames BAR RPAREN {}
    | LPAREN activePatternCaseNames BAR UNDERSCORE BAR RPAREN {}
operatorName :
    | PREFIX_OP {}
    | INFIX_STAR_STAR_OP {}
    | INFIX_COMPARE_OP {}
    | INFIX_AT_HAT_OP {}
    | INFIX_BAR_OP {}
    | INFIX_AMP_OP {}
    | PLUS_MINUS_OP {}
    | INFIX_STAR_DIV_MOD_OP {}
    | DOLLAR {}
    | ADJACENT_PREFIX_OP {}
    | MINUS {}
    | STAR {}
    | EQUALS {}
    | OR {}
    | LESS {}
    | GREATER {}
    | QMARK {}
    | AMP {}
    | AMP_AMP {}
    | BAR_BAR {}
    | COLON_EQUALS {}
    | FUNKY_OPERATOR_NAME {}
    | PERCENT_OP {}
    | DOT_DOT {}
    | DOT_DOT DOT_DOT {}
    | LQUOTE RQUOTE {}
activePatternCaseNames :
    | BAR IDENT {}
    | activePatternCaseNames BAR IDENT {}
access :
    | PRIVATE {}
    | PUBLIC {}
    | INTERNAL {}
constant :
    | rawConstant {}
    | rawConstant HIGH_PRECEDENCE_TYAPP measureTypeArg {}
rawConstant :
    | INT8 {}
    | UINT8 {}
    | INT16 {}
    | UINT16 {}
    | INT32 {}
    | UINT32 {}
    | INT64 {}
    | UINT64 {}
    | NATIVEINT {}
    | UNATIVEINT {}
    | IEEE32 {}
    | IEEE64 {}
    | CHAR {}
    | DECIMAL {}
    | BIGNUM {}
    | STRING {}
    | KEYWORD_STRING {}
    | BYTEARRAY {}
measureTypeArg :
    | LESS measureTypeExpr GREATER {}
    | LESS UNDERSCORE GREATER {}
parenPatternBody :
    | parenPattern {}
    | (*empty*) {}
tupleParenPatternElements :
    | tupleParenPatternElements COMMA parenPattern {}
    | parenPattern COMMA parenPattern {}
    | COMMA parenPattern {}
withClauses :
    | WITH withPatternClauses {}
    | OWITH withPatternClauses OEND {}
ifExprCases :
    | ifExprThen ifExprElifs {}
ifExprThen :
    | THEN declExpr {}
    | OTHEN OBLOCKBEGIN typedSequentialExpr OBLOCKEND {}
ifExprElifs :
    | (*empty*) {}
    | ELSE declExpr {}
    | OELSE OBLOCKBEGIN typedSequentialExpr OBLOCKEND {}
    | ELIF declExpr ifExprCases {}
declExprBlock :
    | OBLOCKBEGIN typedSequentialExpr OBLOCKEND {}
    | declExpr {}
doToken :
    | DO {}
    | ODO {}
doneDeclEnd :
    | DONE {}
    | ODECLEND {}
forLoopBinder :
    | parenPattern IN declExpr {}
opt_OBLOCKSEP :
    | OBLOCKSEP {}
    | (*empty*) {}
arrowThenExprR :
    | RARROW typedSequentialExprBlockR {}
forLoopRange :
    | parenPattern EQUALS declExpr forLoopDirection declExpr {}
forLoopDirection :
    | TO {}
    | DOWNTO {}
moreBinders :
    | AND_BANG headBindingPattern EQUALS typedSequentialExprBlock IN moreBinders {}
    | OAND_BANG headBindingPattern EQUALS typedSequentialExprBlock ODECLEND opt_OBLOCKSEP moreBinders {}
    | (*empty*) {}
minusExpr :
    | INFIX_AT_HAT_OP minusExpr {}
    | MINUS minusExpr {}
    | PLUS_MINUS_OP minusExpr {}
    | ADJACENT_PREFIX_OP minusExpr {}
    | PERCENT_OP minusExpr {}
    | AMP minusExpr {}
    | AMP_AMP minusExpr {}
    | NEW atomTypeNonAtomicDeprecated opt_HIGH_PRECEDENCE_APP atomicExprAfterType DOT atomicExprQualification {}
    | NEW atomTypeNonAtomicDeprecated opt_HIGH_PRECEDENCE_APP atomicExprAfterType {}
    | UPCAST minusExpr {}
    | DOWNCAST minusExpr {}
    | appExpr {}
atomTypeNonAtomicDeprecated :
    | LPAREN appTypePrefixArguments RPAREN appTypeConPower {}
    | atomType {}
opt_HIGH_PRECEDENCE_APP :
    | HIGH_PRECEDENCE_BRACK_APP {}
    | HIGH_PRECEDENCE_PAREN_APP {}
    | (*empty*) {}
atomicExprAfterType :
    | constant {}
    | parenExpr {}
    | braceExpr {}
    | braceBarExpr {}
    | interpolatedString {}
    | NULL {}
    | FALSE {}
    | TRUE {}
    | quoteExpr {}
    | arrayExpr {}
    | beginEndExpr {}
parenExpr :
    | LPAREN RPAREN {}
    | LPAREN parenExprBody RPAREN {}
parenExprBody :
    | typars COLON LPAREN classMemberSpfn RPAREN typedSequentialExpr {}
    | typedSequentialExpr {}
    | inlineAssemblyExpr {}
typars :
    | typar {}
    | LPAREN typarAlts RPAREN {}
typarAlts :
    | typarAlts OR appType {}
    | typar {}
braceExpr :
    | LBRACE braceExprBody RBRACE {}
    | LBRACE RBRACE {}
braceExprBody :
    | recdExpr {}
    | objExpr {}
    | sequentialExpr {}
braceBarExpr :
    | STRUCT braceBarExprCore {}
    | braceBarExprCore {}
braceBarExprCore :
    | LBRACE_BAR recdExprCore BAR_RBRACE {}
    | LBRACE_BAR BAR_RBRACE {}
arrayExpr :
    | LBRACK_BAR arrayExprElements BAR_RBRACK {}
arrayExprElements :
    | sequentialExpr {}
    | (*empty*) {}
beginEndExpr :
    | BEGIN typedSequentialExpr END {}
    | BEGIN END {}
atomicExprQualification :
    | identOrOp {}
    | GLOBAL {}
    | (*empty*) {}
    | LPAREN COLON_COLON RPAREN DOT INT32 {}
    | LPAREN typedSequentialExpr RPAREN {}
    | LBRACK typedSequentialExpr RBRACK {}
identOrOp :
    | IDENT {}
    | opName {}
tupleExpr :
    | tupleExpr COMMA declExpr {}
    | declExpr COMMA declExpr {}
    | COMMA declExpr {}
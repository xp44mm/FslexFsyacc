%{
#nowarn "1182"  // generated code has lots of unused "parseState"
open System
open Internal.Utilities
open Internal.Utilities.Text.Parsing
open Internal.Utilities.Library
open Internal.Utilities.Library.Extras
open FSharp.Compiler
open FSharp.Compiler.AbstractIL
open FSharp.Compiler.AbstractIL
open FSharp.Compiler.DiagnosticsLogger
open FSharp.Compiler.Features
open FSharp.Compiler.ParseHelpers
open FSharp.Compiler.Syntax
open FSharp.Compiler.SyntaxTrivia
open FSharp.Compiler.Syntax.PrettyNaming
open FSharp.Compiler.SyntaxTreeOps
open FSharp.Compiler.SyntaxTreeOps
open FSharp.Compiler.Text
open FSharp.Compiler.Text.Position
open FSharp.Compiler.Text.Range
open FSharp.Compiler.Xml
// This function is called by the generated parser code. Returning initiates error recovery
// It must be called precisely "parse_error_rich"
let parse_error_rich = Some (fun (ctxt: ParseErrorContext<_>) ->
    errorR(SyntaxError(box ctxt, ctxt.ParseState.LexBuffer.LexemeRange)))
%}
typeConstraints :
    | typeConstraints AND typeConstraint {}
    | typeConstraint {}
typeConstraint :
    | DEFAULT typar COLON typ {}
    | typar COLON_GREATER typ {}
    | typar COLON STRUCT {}
    | typar COLON IDENT STRUCT {}
    | typar COLON NULL {}
    | typar COLON LPAREN classMemberSpfn RPAREN {}
    | LPAREN typeAlts RPAREN COLON LPAREN classMemberSpfn RPAREN {}
    | typar COLON DELEGATE typeArgsNoHpaDeprecated {}
    | typar COLON IDENT typeArgsNoHpaDeprecated {}
    | typar COLON IDENT {}
    | appType {}
typeAlts :
    | typeAlts OR appType {}
    | appType {}
%%
%left DELEGATE
%left COLON
%left STRUCT
%left DEFAULT
%left typ
%left typeArgsNoHpaDeprecated
%left typar
%nonassoc RPAREN RPAREN_COMING_SOON RPAREN_IS_HERE
%nonassoc LPAREN
%nonassoc NULL
%nonassoc IDENT
%left OR
%left AND
%left COLON_GREATER

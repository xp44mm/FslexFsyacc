%{%}
typ :
    | tupleType %prec prec_typ_prefix {}
    | tupleType RARROW typ {}
tupleType :
    | INFIX_STAR_DIV_MOD_OP tupleOrQuotTypeElements {}
    | appType %prec prec_tuptyp_prefix {}
    | appType INFIX_STAR_DIV_MOD_OP tupleOrQuotTypeElements {}
    | appType STAR tupleOrQuotTypeElements {}
appType :
    | LPAREN appTypePrefixArguments rparen appTypeConPower {}
    | UNDERSCORE COLON_GREATER typ %prec COLON_GREATER {}
    | appType HIGH_PRECEDENCE_BRACK_APP arrayTypeSuffix {}
    | appType appTypeConPower {}
    | appType arrayTypeSuffix {}
    | powerType {}
    | typar COLON_GREATER typ {}
tupleOrQuotTypeElements :
    | appType %prec prec_tuptyptail_prefix {}
    | appType INFIX_STAR_DIV_MOD_OP tupleOrQuotTypeElements {}
    | appType STAR tupleOrQuotTypeElements {}
appTypeConPower :
    | appTypeCon {}
    | appTypeCon INFIX_AT_HAT_OP atomicRationalConstant {}
appTypePrefixArguments :
    | typeArgActual COMMA typeArgActual typeArgListElements {}
arrayTypeSuffix :
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA COMMA RBRACK {}
    | LBRACK COMMA COMMA RBRACK {}
    | LBRACK COMMA RBRACK {}
    | LBRACK RBRACK {}
powerType :
    | atomTypeOrAnonRecdType {}
    | atomTypeOrAnonRecdType INFIX_AT_HAT_OP atomicRationalConstant {}
rparen :
    | RPAREN {}
    | RPAREN_COMING_SOON rparen {}
    | RPAREN_IS_HERE {}
typar :
    | INFIX_AT_HAT_OP ident {}
    | QUOTE ident {}
appTypeCon :
    | path %prec prec_atomtyp_path {}
    | typar {}
atomTypeOrAnonRecdType :
    | anonRecdType {}
    | atomType {}
atomicRationalConstant :
    | MINUS atomicUnsignedRationalConstant {}
    | atomicUnsignedRationalConstant {}
ident :
    | IDENT {}
typeArgActual :
    | typ {}
    | typ EQUALS {}
    | typ EQUALS typ {}
typeArgListElements :
    | (*empty*) {}
    | typeArgListElements COMMA dummyTypeArg %prec prec_args_error {}
    | typeArgListElements COMMA typeArgActual {}
anonRecdType :
    | STRUCT braceBarFieldDeclListCore {}
    | braceBarFieldDeclListCore {}
atomType :
    | CONST atomicExpr {}
    | FALSE {}
    | HASH atomType {}
    | LPAREN error rparen {}
    | LPAREN typ recover {}
    | LPAREN typ rparen {}
    | NULL {}
    | STRUCT LPAREN appType STAR recover {}
    | STRUCT LPAREN appType STAR tupleOrQuotTypeElements recover {}
    | STRUCT LPAREN appType STAR tupleOrQuotTypeElements rparen {}
    | STRUCT LPAREN appType recover {}
    | STRUCT LPAREN recover {}
    | TRUE {}
    | UNDERSCORE {}
    | appTypeCon DOT ends_coming_soon_or_recover {}
    | appTypeCon typeArgsNoHpaDeprecated %prec prec_atomtyp_path {}
    | appTypeConPower %prec prec_atomtyp_path {}
    | atomType DOT path %prec prec_atomtyp_get_path {}
    | atomType DOT path typeArgsNoHpaDeprecated %prec prec_atomtyp_get_path {}
    | rawConstant {}
atomicUnsignedRationalConstant :
    | INT32 {}
    | LPAREN rationalConstant rparen {}
dummyTypeArg :
    | (*empty*) {}
path :
    | GLOBAL {}
    | ident {}
    | path DOT ends_coming_soon_or_recover {}
    | path DOT ident {}
braceBarFieldDeclListCore :
    | LBRACE_BAR error bar_rbrace {}
    | LBRACE_BAR recdFieldDeclList bar_rbrace {}
    | LBRACE_BAR recdFieldDeclList recover {}
ends_coming_soon_or_recover :
    | MODULE_COMING_SOON {}
    | OBLOCKEND_COMING_SOON {}
    | RBRACE_COMING_SOON {}
    | RPAREN_COMING_SOON {}
    | TYPE_COMING_SOON {}
    | recover {}
rationalConstant :
    | INT32 {}
    | INT32 INFIX_STAR_DIV_MOD_OP INT32 {}
    | MINUS INT32 {}
    | MINUS INT32 INFIX_STAR_DIV_MOD_OP INT32 {}
rawConstant :
    | BIGNUM {}
    | BYTEARRAY {}
    | CHAR {}
    | DECIMAL {}
    | IEEE32 {}
    | IEEE64 {}
    | INT16 {}
    | INT32 {}
    | INT64 {}
    | INT8 {}
    | NATIVEINT {}
    | UINT16 {}
    | UINT32 {}
    | UINT64 {}
    | UINT8 {}
    | UNATIVEINT {}
    | sourceIdentifier {}
    | string {}
recover :
    | EOF {}
    | error {}
typeArgsNoHpaDeprecated :
    | HIGH_PRECEDENCE_TYAPP typeArgsActual {}
    | typeArgsActual {}
bar_rbrace :
    | BAR_RBRACE {}
recdFieldDeclList :
    | recdFieldDecl opt_seps {}
    | recdFieldDecl seps recdFieldDeclList {}
sourceIdentifier :
    | KEYWORD_STRING {}
string :
    | STRING {}
typeArgsActual :
    | LESS GREATER {}
    | LESS recover {}
    | LESS typeArgActual GREATER {}
    | LESS typeArgActual ends_coming_soon_or_recover {}
    | LESS typeArgActualOrDummyIfEmpty COMMA ends_coming_soon_or_recover {}
    | LESS typeArgActualOrDummyIfEmpty COMMA typeArgActualOrDummyIfEmpty typeArgListElements GREATER {}
    | LESS typeArgActualOrDummyIfEmpty COMMA typeArgActualOrDummyIfEmpty typeArgListElements recover {}
opt_seps :
    | (*empty*) {}
    | seps {}
recdFieldDecl :
    | opt_attributes fieldDecl {}
seps :
    | OBLOCKSEP {}
    | OBLOCKSEP SEMICOLON {}
    | SEMICOLON {}
    | SEMICOLON OBLOCKSEP {}
typeArgActualOrDummyIfEmpty :
    | dummyTypeArg {}
    | typeArgActual {}
fieldDecl :
    | opt_mutable opt_access ident COLON typ {}
opt_mutable :
    | (*empty*) {}
    | MUTABLE {}
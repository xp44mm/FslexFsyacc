%{
open FslexFsyacc.Fsyacc
%}
file :
    | HEADER rule+ "%%"? {s0, List.rev s1,[],[]}
    | HEADER rule+ "%%" precedence+ "%%"? {s0, List.rev s1,List.rev s3,[]}
    | HEADER rule+ "%%" declaration+ "%%"? {s0, List.rev s1,[],List.rev s3}
    | HEADER rule+ "%%" precedence+ "%%" declaration+ "%%"? {s0, List.rev s1,List.rev s3,List.rev s5}
rule+ :
    | rule {[s0]}
    | rule+ rule {s1::s0}
rule :
    | symbol ":" "|"? body+ {RegularSymbol.innerSymbol s0,List.rev s3}
symbol :
    | atomic {Atomic s0}
    | repetition {
        match s0 with (f,q) ->
        Repetition(f,q)
    }
    | brackets {Oneof s0}
    | parens {Chain s0}
atomic :
    | ID {s0}
    | LITERAL {s0}
repetition :
    | symbol quantifier {s0,s1}
quantifier :
    | "?" {"?"}
    | "+" {"+"}
    | "*" {"*"}
brackets :
    | "[" symbol+ "]" {List.rev s1}
symbol+ :
    | symbol {[s0]}
    | symbol+ symbol {s1::s0}
parens :
    | "(" symbol+ ")" {List.rev s1}
"|"? :
    | (*empty*) {}
    | "|" {}
body+ :
    | body {[s0]}
    | body+ "|" body {s2::s0}
body :
    | symbol* precToken? SEMANTIC {
        let s0 = s0 |> List.map RegularSymbol.innerSymbol |> List.rev
        s0,s1,s2
    }
symbol* :
    | (*empty*) {[]}
    | symbol+ {s0}
precToken? :
    | (*empty*) {""}
    | "%prec" ID {s1}
"%%"? :
    | (*empty*) {}
    | "%%" {}
precedence+ :
    | precedence {[s0]}
    | precedence+ precedence {s1::s0}
precedence :
    | assoc symbol+ {
        let s1 = s1 |> List.map RegularSymbol.innerSymbol |> List.rev
        s0,s1
    }
assoc :
    | "%left" {"left"}
    | "%right" {"right"}
    | "%nonassoc" {"nonassoc"}
declaration+ :
    | declaration {[s0]}
    | declaration+ declaration {s1::s0}
declaration :
    | symbol ":" atomic { RegularSymbol.innerSymbol s0,s2.Trim() }

%%

HEADER : string
ID : string
LITERAL : string
SEMANTIC : string
assoc : string
body+ : "(string list*string*string)list"
body : "string list*string*string"
declaration : "string*string"
declaration+ : "(string*string)list"
file : "string*(string*((string list*string*string)list))list*(string*string list)list*(string*string)list"
precedence : "string*string list"
precedence+ : "(string*string list)list"
rule : "string*((string list*string*string)list)"
rule+ : "(string*((string list*string*string)list))list"
precToken? : string
atomic : string
quantifier : string
symbol : RegularSymbol
symbol+ : "RegularSymbol list"
symbol* : "RegularSymbol list"
brackets : "RegularSymbol list"
parens : "RegularSymbol list"
repetition : "RegularSymbol*string"


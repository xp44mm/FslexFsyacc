%{
open FslexFsyacc.Runtime
open FslexFsyacc.Fsyacc
open FslexFsyacc.Fsyacc.FsyaccTokenUtils
type token = int*int*FsyaccToken
%}

file:
    | HEADER rules                                    tailPercent {s0, List.rev s1,[],[]}
    | HEADER rules "%%" precedences                   tailPercent {s0, List.rev s1,List.rev s3,[]}
    | HEADER rules "%%"                  declarations tailPercent {s0, List.rev s1,[],List.rev s3}
    | HEADER rules "%%" precedences "%%" declarations tailPercent {s0, List.rev s1,List.rev s3,List.rev s5}

tailPercent:
    | (*empty*) {}
    | "%%"      {}

rules:
    |       rule {[s0]}
    | rules rule {s1::s0}

rule:
    | ID ":" headBar bodies {s0,List.rev s3}

headBar:
    | (*empty*) {}
    | "|"       {}

precedences:             precedence {[s0]}
           | precedences precedence {s1::s0}

precedence : assoc symbols { s0,List.rev s1}

bodies     :            body {[s0]}
           | bodies "|" body {s2::s0}

body:
    | nullableSymbols            SEMANTIC {List.rev s0,"",s1}
    | nullableSymbols "%prec" ID SEMANTIC {List.rev s0,s2,s3}

nullableSymbols:
    |         {[]}
    | symbols {s0}

symbols    :         symbol    {[s0]}
           | symbols symbol    {s1::s0}

symbol     : ID    { s0 }
           | QUOTE { s0 }

assoc      : "%left"         { "left"     }
           | "%right"        { "right"    }
           | "%nonassoc"     { "nonassoc" }

declarations:              declaration   {[s0]}
            | declarations declaration   {s1::s0}

declaration: symbol ":" symbol { s0,s2.Trim() }

%%

HEADER      : "string"
ID          : "string"
QUOTE       : "string"
SEMANTIC    : "string"
assoc       : "string"
bodies      : "(string list*string*string)list"
body        : "string list*string*string"
declaration : "string*string"
declarations: "(string*string)list"
file        : "string*(string*((string list*string*string)list))list*(string*string list)list*(string*string)list"
precedence  : "string*string list"
precedences : "(string*string list)list"
rule        : "string*((string list*string*string)list)"
rules       : "(string*((string list*string*string)list))list"
symbol      : "string"
symbols     : "string list"
nullableSymbols: "string list"

